{% import 'inertias.urdf.jinja' as inertias %}

{# Camera sensor #}

{% macro camera(
    namespace='',
    mass=0.001,
    cuboid_size=0.001,
    camera_mesh='file://$(find uuv_assistants)/meshes/sensors/oe14-372.dae',
    camera_mesh_scale=[1 1 1],
    origin_xyz=[0, 0, 0],
    origin_rpy=[0, 0, 0],
    camera_suffix='',
    parent='base_link',
    update_rate=30,
    hfov=1.5125,
    width=768,
    height=492,
    clip_near=0.05,
    clip_far=3000,
    noise_mean=0,
    noise_stddev=0,
    topic_name='camera_image',
    point_cloud_cutoff=10) %}

    {% if namespace == '' %}
        {% set namespace = '' %}
    {% else %}
        {% set namespace = namespace ~ '/' %}
    {% endif %}

    <!-- Sensor link -->
    <link name="{{ namespace ~ 'camera' ~ camera_suffix ~ '_link' }}">
        {{ inertias.cuboid(mass, cuboid_size, cuboid_size, cuboid_size) }}
        
        <visual>
            <geometry>
                <mesh 
                    filename="{{ camera_mesh }}" 
                    scale="{{ camera_mesh_scale|join(' ') }}"/>
            </geometry>
        </visual>

        <collision>
            <geometry>
                <box size="{{ cuboid_size|join(' ') }}"/>
            </geometry>
        </collision>
    </link>

    <joint name="{{ namespace ~ 'camera' ~ camera_suffix ~ '_joint' }}" type="revolute">
        <origin xyz="{{ origin_xyz|join(' ') }}" rpy="{{ origin_rpy|join(' ') }}"/>
        <parent link="{{ parent }}" />
        <child link="{{ namespace ~ 'camera' ~ camera_suffix ~ '_link' }}" />
        <limit upper="0" lower="0" effort="0" velocity="0" />
        <axis xyz="1 0 0"/>
    </joint>

    <link name="{{ namespace ~ 'camera' ~ camera_suffix ~ '_link_optical' }}">
        {{ inertias.cuboid(0.001, 0.0001, 0.0001, 0.0001) }}
        
        <collision>
            <!-- todo: gazebo needs a collision volume or it will ignore the pose of
                the joint that leads to this link (and assume it to be the identity) -->
            <geometry>
                <cylinder length="0.000001" radius="0.000001"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 1.57079632679 0"/>
        </collision>
    </link>

    <joint name="{{ namespace ~ 'camera' ~ camera_suffix ~ '_link_optical' }}" type="revolute">
        <origin xyz="0 0 0" rpy="-1.57079632679 0 -1.57079632679"/>
        <parent link="{{ namespace ~ 'camera' ~ camera_suffix ~ '_link' }}"/>
        <child link="{{ namespace ~ 'camera' ~ camera_suffix ~ '_link_optical' }}"/>
        <limit upper="0" lower="0" effort="0" velocity="0" />
        <axis xyz="1 0 0"/>
    </joint>

    <gazebo reference="{{ namespace ~ 'camera' ~ camera_suffix ~ '_link' }}">
        <sensor type="camera" name="{{ 'camera' ~ camera_suffix }}">
        <update_rate>{{ update_rate }}</update_rate>
        <camera name="{{ 'camera' ~ camera_suffix }}">
            <horizontal_fov>{{ hfov }}</horizontal_fov>
            <image>
                <width>{{ width }}</width>
                <height>{{ height }}</height>
                <format>R8G8B8</format>
            </image>
            <clip>
                <near>{{ clip_near }}</near>
                <far>{{ clip_far }}</far>
            </clip>
            <noise>
                <type>gaussian</type>
                <mean>{{ noise_mean }}</mean>
                <stddev>{{ noise_stddev }}</stddev>
            </noise>
        </camera>
        <plugin name="{{ 'camera' ~ camera_suffix ~ '_controller' }}" filename="libgazebo_ros_camera.so">
            <updateRate>{{ update_rate }}</updateRate>
            <cameraName>{{ namespace ~ 'camera' ~  camera_suffix }}</cameraName>
            <frameName>{{ 'camera' ~ camera_suffix ~ '_link_optical' }}</frameName>

            <attenuationR>0</attenuationR>
            <attenuationG>0</attenuationG>
            <attenuationB>0</attenuationB>

            <backgroundR>0</backgroundR>
            <backgroundG>0</backgroundG>
            <backgroundB>0</backgroundB>

            <!-- required for ros depth cam -->
            <imageTopicName>{{ topic_name }}</imageTopicName>
            <pointCloudTopicName>{{ topic_name }}_cloud</pointCloudTopicName>
            <depthImageTopicName>{{ topic_name }}_depth</depthImageTopicName>
            <depthImageCameraInfoTopicName>{{ topic_name }}_depth_info</depthImageCameraInfoTopicName>
            <pointCloudCutoff>{{ point_cloud_cutoff }}</pointCloudCutoff>
        </plugin>
        </sensor>
    </gazebo>

{% endmacro %}

{# DVL #}